package openidUtils

import (
	"errors"
	"time"
)

// The credential endpoint issues an approved credential to the end user by presenting a valid access token that represents this approval.
// The client can request the issuance of a credential of a certain type several times, for example,
// to associate the credential with different DIDs/public keys (e.g.: professional profiles in a client app) or to refresh a given credential.
//
// Issued credential SHOULD be cryptographically bound to the identifier of the End-User who possesses the credential.
// Cryptographic binding allows the Verifier to verify during presentation that the End-User presenting a credential is the same End-User to whom it was issued.
//
// If the access token is valid to request the issuance of multiple credentials, it is at the discretion of the client
// to decide the order in which it will request the issuance of multiple credentials requested in the Authorization Request.
//
// The following new endpoints can exist:
// a)Issuance Initiation Endpoint: An endpoint exposed by the wallet that allows an issuer to initiate the issuance flow.
// 	 This can be encoded in a QR code containing a DIDComm Invitation message with the Issuance Initiation Endpoint.
//   If no internet connection is available this Invitation message allows to start the DID Exchange protocol.
// b)Credential Endpoint: this is the OAuth-protected API to issue verifiable credentials.
// c)Deferred Credential Endpoint: this endpoint is used for deferred issuance of verifiable credentials
//
// Credential Request: The wallet sends an authorization request to the issuer.
// This request determines the types of verifiable credentials the wallet (on behalf of the user) wants to obtain.
// The issuer will typically authenticate the user in the first step of this process;
// it will have an access token after registering the wallet's JWK.
// The Access Token is used to request the issuance of the actual credentials.
// The types of credentials the wallet can request is limited to the types approved in the authorization request.
// The issuers MAY call back to the wallet to fetch verifiable credentials it needs as prerequisite to issuing the requested credentials.
// From a protocol perspective, the issuers acts in this case as verifier and sends a request as defined in OIDC4VP to the wallet.
//
// The Client app sends a HttpHeaders POST request to the Issuer's Request Credential Endpoint with the following parameters:
// 	- "type": REQUIRED. Type of credential being requested.
//	  It corresponds to a schema property in a Credential Manifest obtained in a setup phase.
// 	- "format": OPTIONAL. Format of the credential to be issued.
//	  If not present, the issuer will determine the credential format based on the client's format default.
// 	- "proof" OPTIONAL. JSON Object containing proof of possession of the key material the issued credential shall be bound to.
//
// The proof object MUST contain the following "proof_type" element which determines its structure:
// 	- "proof_type": REQUIRED. JSON String denoting the proof type.
//
// This specification defines the following values for "proof_type":
// 	- "jwt": objects of this type contain a single jwt element with a signed JWT as proof of possession.
//	  (only jwt is allowed by the specification).
// 	  The JWT MUST contain the following elements:
// 		- kid: CONDITIONAL. JWT header containing the key ID. If the credential shall be bound to a DID,
// 	  	  the kid refers to a DID URL which identifies a particular key in the DID Document that the credential shall be bound to.
// 		- jwk: CONDITIONAL. JWT header containing the key material the new credential shall be bound to.
//		  MUST NOT be present if kid is present.
// 		- iss: REQUIRED. MUST contain the client_id of the sender
// 		- aud: REQUIRED. MUST contain the issuer URL of credential issuer
// 		- iat: REQUIRED. MUST contain the instant when the proof was created
// 		- nonce: REQUIRED. MUST contain a fresh nonce as provided by the issuer
//
// The proof element MUST incorporate a fresh nonce value generated by the credential issuer
// and the credential issuer's identifier (audience) to allow the credential issuer to detect replay.
//
// The way that data is incorporated depends on the proof type.
// In a JWT, for example, the nonce is conveyed in the nonce claims whereas the audience is conveyed in the aud claim.
// In a Linked Data proof, for example, the nonce is included as the challenge.
//
// NOTE: the type should have 2 credentials (FHIR Practitioner and FHIR PractitionerRole)
type RequestCredential struct {
	Type   string                 `json:"type"`             // REQUIRED. Type of credential being requested (schema property in a Credential Manifest obtained in a setup phase.)
	Format *string                `json:"format,omitempty"` // OPTIONAL. Format of the credential to be issued.
	Proof  RequestCredentialProof `json:"proof"`            // OPTIONAL. JSON Object containing Proof of possession of the key material the issued credential shall be bound to.
}

type RequestCredentialProof struct {
	ProofType string               `json:"proof_type"` // REQUIRED. JSON String denoting the proof type.
	Jwt       RequestCredentialJWT `json:"jwt"`        // CONDITIONAL. Signed JWT as proof of possession.
}

type RequestCredentialJWT struct {
	// Jwk   map[string]interface{}// CONDITIONAL and removed in UHC. MUST NOT be present if Kid is present.
	Kid      string `json:"kid"`       // REQUIRED in UHC. If the credential shall be bound to a DID, it refers to a DID URL Kid that the credential shall be bound to.
	Issuer   string `json:"iss"`       // REQUIRED. MUST contain the "client_id" of the sender.
	Audience string `json:"aud"`       // REQUIRED. MUST contain the issuer URL of credential issuer.
	IssuedAt int    `json:"issued_at"` // REQUIRED. MUST contain the instant when the proof was created.
	Nonce    string `json:"nonce"`     // REQUIRED. MUST contain a fresh nonce as provided by the issuer.
}

// 6.7.3. Credential Response: can be Synchronous or Deferred.
// The Issuer may be able to immediately issue a requested credential and send it to the Client.
// In other cases, the Issuer may not be able to immediately issue a requested credential
// and would want to send a token to the Client to be used later to receive a credential when it is ready.
// The following claims are used in the Credential Response:
// - "format": REQUIRED. JSON string denoting the credential's format
// - "credential": OPTIONAL. JSON string that is the base64url encoded representation of the issued credential.
//	 MUST be present when acceptance_token is not returned.
// - "acceptance_token": OPTIONAL. A JSON string containing a token subsequently used to obtain a credential.
//	 MUST be present when credential is not returned.
// - "c_nonce": OPTIONAL. JSON string containing a nonce to be used to create a proof of possession of key material when requesting a credential (see Section 6.7.2).
// - "c_nonce_expires_in": OPTIONAL. JSON integer denoting the lifetime in seconds of the c_nonce.
//
// NOTE 1: "c_nonce" is like the "jti" property in JWT
// NOTE 2: "c_nonce_expires_in" is like the "nbf" in JWT

type ResponseCredential struct {
	Format     string `json:"format"`             // REQUIRED. JSON string denoting the credential's format
	Credential string `json:"credential"`         // REQUIRED in UHC. JSON string that is the base64url encoded representation of the issued credential.
	Cnonce     string `json:"c_nonce"`            // OPTIONAL. JSON string containing a nonce to be used to create a proof of possession of key material when requesting a credential (see Section 6.7.2).
	CnonceExp  int    `json:"c_nonce_expires_in"` // OPTIONAL. JSON integer denoting the lifetime in seconds of the c_nonce.
	// AcceptanceToken is OPTIONAL and has been removed in UHC. A JSON string containing a token subsequently used to obtain a credential.
}

// It returns the standardized OpenID properties.
// The credential is in JWT format with "jti"="c_nonce" and "nbf"="c_nonce_expires_in" (expiration in UNIX seconds, not ms.)
// When the organization issues a credential for its employees, the expiration time can be:
// - none if it is a non limited time relatioship;
// - or limited to the duration of the contract.
// The active jti (c_nonce) can be revoked at any time so a third party SHOULD check the validity of the credential.
var CreateCredentialResponse = func(vc *map[string]interface{}, nonce *string, expiration *int) (*ResponseCredential, error) {
	if vc == nil || expiration == nil || *expiration < time.Now().Second() {
		return nil, errors.New("bad format to create the response")
	}

	// TODO: set the validUntil in the practitionerRole credential but not in the Practitioner credential or claims

	responseCredential := &ResponseCredential{
		Format:     "",          // REQUIRED. JSON string denoting the credential's format
		Credential: "",          // REQUIRED in UHC. JSON string that is the base64url encoded representation of the issued credential.
		Cnonce:     *nonce,      // OPTIONAL. JSON string containing a nonce to be used to create a proof of possession of key material when requesting a credential (see Section 6.7.2).
		CnonceExp:  *expiration, // OPTIONAL. JSON integer denoting the lifetime in seconds of the c_nonce.
	}

	return responseCredential, nil
}
